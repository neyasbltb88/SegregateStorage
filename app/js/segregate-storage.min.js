(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Storage =
/*#__PURE__*/
function () {
  function Storage(name) {
    _classCallCheck(this, Storage);

    this.name = name;
    this.init();
  }

  _createClass(Storage, [{
    key: "set",
    value: function set(key, val) {
      if (val === undefined) return false;
      var tmp = JSON.parse(localStorage.getItem(this.name));
      tmp[key] = val;
      localStorage.setItem(this.name, JSON.stringify(tmp));
      return tmp;
    }
  }, {
    key: "get",
    value: function get(key) {
      var tmp = JSON.parse(localStorage.getItem(this.name));
      return tmp[key];
    }
  }, {
    key: "getAll",
    value: function getAll() {
      var tmp = JSON.parse(localStorage.getItem(this.name));
      return tmp;
    }
  }, {
    key: "remove",
    value: function remove(key) {
      var tmp = JSON.parse(localStorage.getItem(this.name));
      delete tmp[key];
      localStorage.setItem(this.name, JSON.stringify(tmp));
      return tmp;
    }
  }, {
    key: "clear",
    value: function clear() {
      localStorage.removeItem(this.name);
    } // Метод подготовки

  }, {
    key: "prepareStorage",
    value: function prepareStorage() {
      if (localStorage.getItem(this.name) == null) {
        var start_obj = {};
        localStorage.setItem(this.name, JSON.stringify(start_obj));
        return true;
      }

      return false;
    }
  }, {
    key: "init",
    value: function init() {
      this.prepareStorage();
    }
  }]);

  return Storage;
}();

window.Storage = Storage;

},{}]},{},[1])

//# sourceMappingURL=maps/segregate-storage.min.js.map
